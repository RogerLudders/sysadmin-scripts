#!/usr/bin/ksh
########################################################################
#								
#   PROGRAM NAME :  Email Delivery Utility. (rbshu012)
#
#   SYSTEM :	    Returns Processing System
#
#   DESCRIPTION :
#
#       The purpose of this script is to process and execute the
#	delivery of email requests submitted through the reports
#       router (RBSHC008) or through ITAS return processing.  The 
#	script makes use of the zmail application and takes as 
#       parameters a series of flags and values:
#
#       -s{subject line}    -> required. indicates the subject to  
#                              be given to the email
#       -b{email body}      -> required. the name of the text file 
#			       which holds the body of the email
#       -a{file attachment} -> optional. the name of the file(s)
#                              which is to be attached to the email
#       -e{email address}   -> required. the internet address(es) to
#                              which the email should be delivered 
#
#   CALLED BY :
#	The Report Router (RBSHC008) 
#       ITAS Return Processing Modules	
#       ADHOC Reports Modules - ROPRP602 & UNIX/Linux Scripts
#
#   CALLS :  
#
#
########################################################################
########################################################################
#
#                     R E V I S I O N   T R A I L
#
########################################################################
#
# PROGRAMMER             DATE           MODIFICATIONS
# -------------------  --------  ---------------------------
# AWL                  10/17/00  INITIAL CREATION
# MKS                  12/04/00  attachment logic enhancements
# PAUL CRUZ            3/17/09   SIR 13016: Allow multiple email recipients
# PAUL CRUZ            10/22/09  SIR 13807: Allow this job to be called from rti_demands
# Raymond Ciani        01/10/11  SIR 14684: Allow for Ad-Hoc Reports to distribute via
#                                            email (modify to allow call flexability)
# Raymond Ciani        01/20/12  SIR 14684: Modified to handle Attachment too
#                                            large to email.
# Steve Oliphant	   09/21/12  Fixed call to mailx to work on Linux latest patch set
#
# Paul Cruz            1/28/2013 SIR 16475  Use -e escape character in echo
#
# Ameeta Mahendra      6/11/2013 SIR 16167  Modified to send attachment from INTRF folder
#
# Paul Cruz            3/19/2018 SIR 18720  Remove filesize check for mode 2
#
########################################################################

now=$(date +"%Y%m%d%H%M%S")
echo "$now entering rbshu012"


# can use this function to add loggers for consoles if desired
Do_echo()
{
   echo "$*" 
}


Initialize()
{
  EXEC=`basename $0`
  USAGE="Usage: $EXEC -s{subject} -b{filename for body} [-a{file to attach}] -e{email@address}"

  SUCCESS=0
  FAILURE=1

  SFLAG= 
  BFLAG=
  EFLAG=
  AFLAG=
  ATTACH=
  DEMAND=
  DTSTAMP=`date +%Y%j_%H%M%S`
  BILLNOT=$ITAS_RPTS/billing_notice.$DTSTAMP
  WORKDIR=$ITAS_RPTS
  now=$(date +"%Y%m%d%H%M%S")
  if [ -z "$ITAS_RPTS" ]; then
     Do_echo "$now $EXEC: Reports environment not properly set."
     exit $FAILURE
  fi
  
  if [ -z "$ITAS_INTRF" ]; then
     Do_echo "$now $EXEC: Reports environment not properly set for Ad-Hoc Report Distribution"
     exit $FAILURE    
  fi  
  
}


Chk_Cline()
{
  now=$(date +"%Y%m%d%H%M%S")
  #This is to make sure that the required flags have been used
  if [ -z "$SFLAG" ]; then
     Do_echo "$now Did not specify subject line" 
     Do_echo "$now $USAGE"
     exit $FAILURE
  fi

  if [ -z "$BFLAG" ]; then
     Do_echo "$now Did not specify text file for email body"
     Do_echo "$now $USAGE"
     exit $FAILURE
  fi

  if [ -z "$EFLAG" ]; then
     Do_echo "$now Did not specify email address"
     Do_echo "$now $USAGE "
     exit $FAILURE
  fi
}


Validate_Params()
{
 # Defaults for MAX size email attachment
 # email body to be used when an email attachment is too large
 now=$(date +"%Y%m%d%H%M%S")
 MAXSZBODY=$WORKDIR/email/maxszemail.body
 
 # Maximum allowable size of an attachment in bytes
 #MAXATTSZ=1048576
 #MAXATTSZ=512000
 MAXATTSZ=15000000
 
 # Only DOR domain can receive attachments
 VALATTDOMAIN=azdor.gov

 # Build param variables
 SUBJECT=$SVAL
 MAILTO=$EVAL
 MAILBODY=$ITAS_RPTS/email/$BVAL
 echo "$now SUBJECT; MAILTO; MAILBODY"
 echo "$now $SUBJECT; $MAILTO; $MAILBODY"
 
 
 # Determine origin of email request job
 if [ "$DEMAND" = "0" ]; then
 
   # job is from a demands row 
   echo "$now job is from a demands row"
   
    echo -e $BVAL > $BILLNOT
    MAILBODY=$BILLNOT
    
 elif [ "$DEMAND" = "1" ]; then
 
   # job is from Ad-Hoc job
   echo "$now job is from Ad-Hoc job"
     
   WORKDIR=$ITAS_INTRF

   if [ ! -z "$AFLAG" ]; then

      cat $WORKDIR/$AVAL | while read AFILE
         do
            if [ ! -f "$WORKDIR/$AFILE" ]; then
               Do_echo "$now $EXEC: Email attachment $WORKDIR/$AFILE does not exist!" 
               exit $FAILURE

            fi

            FSIZE=`wc -c $WORKDIR/$AFILE|awk '{print $1}'`
            ATTSZ=$(($ATTSZ + $FSIZE))

         done

      echo "$now attachment file(s) total size: $ATTSZ"

      Do_echo "$EXEC: eMAIL String is $MAILTO"
      ATTDOMAIN=`echo "$MAILTO" | tr '[,]' '[\n]' | cut -f2 -d@`
      if [ "$ATTDOMAIN" != "$VALATTDOMAIN" ]; then
         Do_echo "$now $EXEC: Attempted to send email attachment to $ATTDOMAIN domain other than $VALATTDOMAIN!" 
         exit $FAILURE
      fi
    

      if [ $ATTSZ -lt $MAXATTSZ ]; then
         ATTMAX_FLAG=0
         ATTACH=$WORKDIR/$AVAL
      else
         ATTMAX_FLAG=1
         MAILBODY=$MAXSZBODY
      fi
      
   fi
   
   # Verify param values for email body   
   
   if [ ! -f $MAILBODY ]; then
      Do_echo "$now $EXEC: Email body $MAILBODY does not exist!"
      exit $FAILURE
   fi
      
 elif [ "$DEMAND" = "2" ]; then

   # job is reports with no attachment but with file transfer
   echo "$now job is reports with no attachment but with file transfer"
     
   WORKDIR=$ITAS_INTRF

   if [ ! -z "$AFLAG" ]; then

      if [ ! -f "$WORKDIR/$AVAL" ]; then
         Do_echo "$now $EXEC: Output file $WORKDIR/$AVAL does not exist!" 
         exit $FAILURE
      fi

      ATTACH=$WORKDIR/$AVAL      
   fi

  elif [ "$DEMAND" = "3" ]; then

   # job is from demand row with attachment from intrf folder
   echo "$now job is with attachment from INTRF folder"
     
   WORKDIR=$ITAS_INTRF

   if [ ! -z "$AFLAG" ]; then

      if [ ! -f "$WORKDIR/$AVAL" ]; then
         Do_echo "$now $EXEC: Output file $WORKDIR/$AVAL does not exist!" 
         exit $FAILURE
      fi

      Do_echo "$EXEC: eMAIL String is $MAILTO"
      echo "$MAILTO" | tr '[,]' '[\n]' | while read item 
      do
         ATTDOMAIN=`echo $item|cut -f2 -d@`
         if [ "$ATTDOMAIN" != "$VALATTDOMAIN" ]; then
            Do_echo "$now $EXEC: Attempted to send email attachment to $ATTDOMAIN domain other than $VALATTDOMAIN!" 
            exit $FAILURE
         fi
      done



      ATTSZ=`wc -c $WORKDIR/$AVAL|awk '{print $1}'`
      if [ $ATTSZ -lt $MAXATTSZ ]; then
         ATTACH=$WORKDIR/$AVAL
      else
         MAILBODY=$MAXSZBODY
      fi
      
   fi
   

 else
  
   # job is not from a demands row (called from RBSHC008)
   echo "$now job is not from a demands row (called from RBSHC008)"

   if [ ! -z "$AFLAG" ]; then
      if [ ! -f "$WORKDIR/$AVAL" ]; then
         Do_echo "$now $EXEC: Email attachment $WORKDIR/$AVAL does not exist!" 
         exit $FAILURE
      fi
     
      # parse string to check the domain of each email recipient
  
      Do_echo "$EXEC: eMAIL String is $MAILTO"
      echo "$MAILTO" | tr '[,]' '[\n]' | while read item 
      do
         ATTDOMAIN=`echo $item|cut -f2 -d@`
         if [ "$ATTDOMAIN" != "$VALATTDOMAIN" ]; then
            Do_echo "$now $EXEC: Attempted to send email attachment to $ATTDOMAIN domain other than $VALATTDOMAIN!" 
            exit $FAILURE
         fi
      done
      
      ATTSZ=`wc -c $WORKDIR/$AVAL|awk '{print $1}'`
      if [ $ATTSZ -lt $MAXATTSZ ]; then
         ATTACH=$WORKDIR/$AVAL
      else
         MAILBODY=$MAXSZBODY
      fi
   fi 

   # Verify param values for email body
   
   if [ ! -f $MAILBODY ]; then
      Do_echo "$now $EXEC: Email body $MAILBODY does not exist!"
      exit $FAILURE
   fi
   
 fi

}
 
Send_Email()
{
now=$(date +"%Y%m%d%H%M%S")
echo "$now entering function Send_Email()"
export MAILBODY
export ATTACH
export AVAL 
export ATTMAX_FLAG

echo "$now MAILBODY='$MAILBODY"
echo "$now ATTACH='$ATTACH"
echo "$now AVAL='$AVAL"
echo "$now ATTMAX_FLAG='$ATTMAX_FLAG"

  TMPSUB=`echo $SUBJECT | cut -d";" -f 1`

  if [ -z "$ATTACH" ]; then

     if [ "$ATTMAX_FLAG" = "1" ]; then

        # Ad-Hoc Reports too large to email; alternative deliver route
        echo "$now Ad-Hoc Reports Request too large to email; alternative deliver route"
        echo "$now $WORKDIR/$AVAL"
		echo "$now /usr/bin/mailx -s $TMPSUB $MAILTO"

        {
           echo "Your report(s) are too large to send as an e-mail attachment.\n"
           echo "The report(s) will be delivered to a designated network folder.\n"
       
           cat $WORKDIR/$AVAL | while read RNAME
             do
                   echo $RNAME
             done

           echo " "
           echo "All attachments/files are intended for internal use only."

        } | /usr/bin/mailx -s "$TMPSUB" $MAILTO
        RETVAL=$?
     

     else
		now=$(date +"%Y%m%d%H%M%S")
		echo "$now "
        echo $MAILBODY
        cat $ITAS_RPTS/email/stdemail
#		replacing this command
#       cat $ITAS_RPTS/email/stdemail | /usr/bin/mailx -s "[secure]- $SUBJECT" $MAILTO
#		with this one
		echo "$now ( cat $MAILBODY ) | /usr/bin/mailx -s $SUBJECT $MAILTO"
		( cat $MAILBODY ) | /usr/bin/mailx -s "[secure]- $SUBJECT" $MAILTO
        RETVAL=$?

     fi
  
  elif [ "$DEMAND" = "1" ]; then
 
    # job was request by Ad-Hoc Reports Jobs
	now=$(date +"%Y%m%d%H%M%S")

    echo "$now Ad-Hoc Reports Request [$DEMAND = 1]"
    echo "$now $WORKDIR/$AVAL"
	echo "$now /usr/bin/mailx -s $TMPSUB $MAILTO"

    {
     cat $WORKDIR/$AVAL | while read AFILE
        do
           uuencode $WORKDIR/$AFILE $AFILE 
        done

        echo "Your report(s) request is attached in this email."
        echo " "

        i=0
        echo $SUBJECT | tr '[;]' '[\n]' | while read RNAME
           do 
              i=$((i+1))
            
              if [ $i -gt 1 ]; then
                 echo $RNAME
              fi
           done
        
        echo " "
        echo "All attachments/files are intended for internal use only."

    } | /usr/bin/mailx -s "$TMPSUB" $MAILTO
    RETVAL=$?

  elif [ "$DEMAND" = "2" ]; then

     # Some reports might have attachments over the size limit; file transfer output to a designated folder
     now=$(date +"%Y%m%d%H%M%S")

     echo "$now Report with no attachment but file transfer  [DEMAND = 2]"
     echo "$now $WORKDIR/$AVAL"
	 echo "$now /usr/bin/mailx -s $TMPSUB $MAILTO"

     {
        echo "This report will be delivered to a designated network folder."
        echo $AVAL
        echo " "
        echo "All attachments/files are intended for internal use only."

     } | /usr/bin/mailx -s "$TMPSUB" $MAILTO
     RETVAL=$?

  elif [ "$DEMAND" = "3" ]; then
     # job is from a demands row 
     now=$(date +"%Y%m%d%H%M%S")
     echo "$now job is from a demands row with attachment"

     echo "$now ATTACH=$ATTACH"
     echo "$now AVAL=-$AVAL"
     echo "$now ( cat $MAILBODY; uuencode $ATTACH $AVAL ) | /usr/bin/mailx -s $SUBJECT $MAILTO"
     ( cat $MAILBODY; uuencode $ATTACH $AVAL ) | /usr/bin/mailx -s "[secure]- $SUBJECT" $MAILTO
     RETVAL=$?


  else

     # job is not from a demands row (called from RBSHC008)
     now=$(date +"%Y%m%d%H%M%S")
     echo "$now job is not from a demands row (called from RBSHC008) with attachment"

     echo "$now ATTACH=$ATTACH"
     echo "$now AVAL=-$AVAL"
	 echo "$now ( cat $MAILBODY; uuencode $ATTACH $AVAL ) | /usr/bin/mailx -s $SUBJECT $MAILTO"
     ( cat $MAILBODY; uuencode $ATTACH $AVAL ) | /usr/bin/mailx -s "[secure]- $SUBJECT" $MAILTO
     RETVAL=$?
  
  fi 
  
  # handle errors
  if [ $RETVAL -ne 0 ]; then
     Do_echo "$now $EXEC: Email request with subject '$SUBJECT' failed. Intended recipient was $MAILTO"
     exit $FAILURE
  fi


} 

#############
# MAIN LINE #
#############

Initialize

# Parse_Cline
#   this must be done in the main line because there are
#   issues passing parameters that include spaces as an
#   argument to a function

# If the first parameter is 0, it means this job was called by adding into rti_demands.  RBSHC001 then added the 0 job sequence.
# If it is 1, this job is called from an ad-hoc defined job.  Ex. Job rrpfj667 (Orphan Report)
# If it is 2, this job is called from a script that emails without any attachment, such as rrvaj620.
# If it is 3, this job is called from a script that emails with attachment. such as rrvaj621
# Ignore the [0,1,2,3] and shift to the next parameter.  If it is not [0,1,2,3], this job is called from RBSHC008 with no job sequence parm.

 now=$(date +"%Y%m%d%H%M%S")
  echo "$now MAIN LINE"

  if [ "$1" = "0" ]; then

     DEMAND=0
     shift

  elif [ "$1" = "1" ]; then

     DEMAND=1
     shift       

  elif [ "$1" = "2" ]; then

     DEMAND=2
     shift      
      
  elif [ "$1" = "3" ]; then

     DEMAND=3
     shift       

  fi

  while getopts s:b:a:e: FLAGS; do
    case $FLAGS in
        s)
           SFLAG=1
           SVAL="$OPTARG"
           FLAGCHK=`echo $SVAL|cut -c1`
           if [ "$FLAGCHK" = "-" ]; then
              Do_echo "$now $EXEC: missing parameter for -s flag"
              Do_echo "$now $USAGE"
              exit $FAILURE
           fi
           ;;
        b)
           BFLAG=1
           BVAL="$OPTARG"
           FLAGCHK=`echo $BVAL|cut -c1`
           if [ "$FLAGCHK" = "-" ]; then
              Do_echo "$now $EXEC: missing parameter for -b flag"
              Do_echo "$now $USAGE"
              exit $FAILURE
           fi
           ;;
        a)
           AFLAG=1
           AVAL="$OPTARG"
           FLAGCHK=`echo $AVAL|cut -c1`
           if [ "$FLAGCHK" = "-" ]; then
              Do_echo "$now $EXEC: missing parameter for -a flag"
              Do_echo "$now $USAGE"
              exit $FAILURE
           fi
           ;;
        e)
           EFLAG=1
           EVAL="$OPTARG"
           FLAGCHK=`echo $EVAL|cut -c1`
           if [ "$FLAGCHK" = "-" ]; then
              Do_echo "$now $EXEC: missing parameter for -e flag"
              Do_echo "$now $USAGE"
              exit $FAILURE
           fi
           ;;
        ?)
           Do_echo "$now Invalid flags? [$FLAGS]"
           Do_echo "$now $USAGE"
           exit $FAILURE
           ;;
    esac
  done

  #what is left on the command line
  shift $(($OPTIND -1))

  #There should be no command line parameters left after getopts is done
  if [ $# -ne 0 ]; then
     Do_echo "$now Demand is $DEMAND"
     Do_echo "$now parms left: $#"
     Do_echo "$now Too many parameters?"
     Do_echo "$now $USAGE"
     exit $FAILURE
  fi

### end Parse_Cline function

now=$(date +"%Y%m%d%H%M%S")

echo "$now *****************"
echo "$now calling Chk_Cline"
echo "$now *****************"
Chk_Cline

echo "$now *****************"
echo "$now calling Validate_Params"
echo "$now *****************"
Validate_Params


echo "$now *****************"
echo "$now calling Send_Email"
echo "$now *****************"
Send_Email


echo "$now exit $SUCCESS"
exit $SUCCESS 
